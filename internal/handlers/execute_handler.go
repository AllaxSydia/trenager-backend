package handlers

import (
	"backend/internal/executor"
	"backend/internal/models"
	"backend/internal/services"
	"bytes"
	"encoding/json"
	"io"
	"log"
	"net/http"
	"strconv"
	"strings"
)

// –ö–æ—Ä–æ—á–µ, —Ç—É—Ç –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –ª–∏–±–æ Docker –ª–∏–±–æ –õ–æ–∫–∞–ª—å–Ω–æ
// –ø–æ—Ç–æ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞

var dockerService *services.DockerService // –ò–∑–æ–ª—è—Ü–∏—è
var localExecutor *executor.LocalExecutor // –ë—ã—Å—Ç—Ä–æ

func init() {
	var err error
	dockerService, err = services.NewDockerService()
	if err != nil {
		log.Printf("Warning: Docker service not available: %v", err)
		log.Println("Running in local execution mode")
	} else {
		log.Println("‚úÖ Docker service initialized successfully")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
	localExecutor = executor.NewLocalExecutor()
	// –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å Docker —Å–µ—Ä–≤–∏—Å –¥–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Ç–æ
	// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
	// –õ–æ–∫–∞–ª–∫–∞ —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤—Å–µ–≥–¥–∞
}

func ExecuteHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, `{"success": false, "message": "Only POST method allowed"}`, http.StatusMethodNotAllowed)
		return
	}
	// –ü–∞—Ä—Å–∏–Ω–≥ JSON
	var req models.ExecutionRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, `{"success": false, "message": "Invalid JSON"}`, http.StatusBadRequest)
		return
	}

	log.Printf("üîß Executing code for language: %s", req.Language)

	var response models.ExecutionResponse

	// –ü—Ä–æ–±—É–µ–º Docker —Å–Ω–∞—á–∞–ª–∞
	if dockerService != nil {
		log.Println("üê≥ Attempting Docker execution...")
		result, err := dockerService.ExecuteCode(req.Code, req.Language)
		if err != nil {
			log.Printf("‚ùå Docker execution failed: %v", err)
			log.Println("üîÑ Falling back to local execution...")
			response = executeCodeWithLocalExecutor(req.Code, req.Language)
		} else {
			log.Printf("‚úÖ Docker execution successful, output: %s", result.Output)
			response = models.ExecutionResponse{
				Success: result.Success,
				Message: "Code executed successfully via Docker",
				Output:  result.Output,
			}
			if !result.Success {
				response.Message = "Code execution failed in Docker"
			}
		}
	} else {
		log.Println("üîÑ Docker not available, using local execution...")
		response = executeCodeWithLocalExecutor(req.Code, req.Language)
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è LocalExecutor –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
func executeCodeWithLocalExecutor(code, language string) models.ExecutionResponse {
	log.Printf("üîß Executing %s code with local executor", language)

	// –£–î–ê–õ–ò –≠–¢–£ –ü–†–û–í–ï–†–ö–£ - –æ–Ω–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç Java!
	// if language == "java" {
	//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Java –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä
	//     if _, err := exec.LookPath("javac"); err != nil {
	//         return models.ExecutionResponse{
	//             Success: false,
	//             Message: "Java execution is not available. Please install Java JDK.",
	//             Output:  "",
	//         }
	//     }
	// }

	result, err := localExecutor.Execute(code, language)

	if err != nil {
		log.Printf("‚ùå Local execution error: %v", err)
		return models.ExecutionResponse{
			Success: false,
			Message: "Execution failed: " + err.Error(),
			Output:  "",
		}
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ LocalExecutor –≤ models.ExecutionResponse
	exitCode := result["exitCode"].(int)
	output := result["output"].(string)
	errorMsg := result["error"].(string)

	success := exitCode == 0
	finalOutput := output
	if errorMsg != "" {
		finalOutput = errorMsg
		if output != "" {
			finalOutput = output + "\n" + errorMsg
		}
	}

	message := "–ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (–ª–æ–∫–∞–ª—å–Ω–æ)"
	if !success {
		message = "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞"
	}

	log.Printf("‚úÖ Local execution completed, success: %t, output length: %d", success, len(finalOutput))

	return models.ExecutionResponse{
		Success: success,
		Message: message,
		Output:  finalOutput,
	}
}

// CheckHandler - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏–π –∑–∞–¥–∞—á
func CheckHandler(w http.ResponseWriter, r *http.Request) {
	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
	log.Printf("üéØ CheckHandler called: %s %s", r.Method, r.URL.Path)
	log.Printf("üìã Headers: Content-Type=%s, Content-Length=%s",
		r.Header.Get("Content-Type"),
		r.Header.Get("Content-Length"))

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞
	if r.Method != "POST" {
		log.Printf("‚ùå Method not allowed: %s", r.Method)
		http.Error(w, `{"success": false, "message": "Only POST method allowed"}`, http.StatusMethodNotAllowed)
		return
	}

	// –ß—Ç–µ–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
	bodyBytes, err := io.ReadAll(r.Body)
	if err != nil {
		log.Printf("‚ùå Failed to read request body: %v", err)
		http.Error(w, `{"success": false, "message": "Failed to read request body"}`, http.StatusBadRequest)
		return
	}

	// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ body –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
	r.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))

	log.Printf("üì¶ Raw request body (%d bytes): %s", len(bodyBytes), string(bodyBytes))

	// –ü–∞—Ä—Å–∏–Ω–≥ JSON –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥–∏–±–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ task_id
	var rawReq map[string]interface{}
	if err := json.NewDecoder(r.Body).Decode(&rawReq); err != nil {
		log.Printf("‚ùå JSON parse error: %v", err)
		log.Printf("‚ùå Request body that failed parsing: %s", string(bodyBytes))
		http.Error(w, `{"success": false, "message": "Invalid JSON"}`, http.StatusBadRequest)
		return
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º task_id –≤ —Å—Ç—Ä–æ–∫—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∏–ø–∞
	taskID := ""
	if taskIDVal, exists := rawReq["task_id"]; exists {
		switch v := taskIDVal.(type) {
		case string:
			taskID = v
		case float64: // JSON —á–∏—Å–ª–∞ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è float64
			taskID = strconv.Itoa(int(v))
		case int:
			taskID = strconv.Itoa(v)
		default:
			log.Printf("‚ùå Unknown task_id type: %T", taskIDVal)
			http.Error(w, `{"success": false, "message": "Invalid task_id format"}`, http.StatusBadRequest)
			return
		}
	} else {
		log.Printf("‚ùå task_id is missing in request")
		http.Error(w, `{"success": false, "message": "task_id is required"}`, http.StatusBadRequest)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
	language, _ := rawReq["language"].(string)
	code, _ := rawReq["code"].(string)

	log.Printf("üîç Parsed request: task_id=%s, language=%s, code_length=%d",
		taskID, language, len(code))

	// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
	log.Printf("üöÄ Starting code execution for task %s", taskID)
	var executionResult models.ExecutionResponse

	if dockerService != nil {
		log.Println("üê≥ Attempting Docker execution...")
		result, err := dockerService.ExecuteCode(code, language)
		if err != nil {
			log.Printf("‚ùå Docker execution failed: %v", err)
			log.Println("üîÑ Falling back to local execution...")
			executionResult = executeCodeWithLocalExecutor(code, language)
		} else {
			log.Printf("‚úÖ Docker execution successful")
			executionResult = models.ExecutionResponse{
				Success: result.Success,
				Output:  result.Output,
			}
		}
	} else {
		log.Println("üîÑ Docker not available, using local execution...")
		executionResult = executeCodeWithLocalExecutor(code, language)
	}

	log.Printf("üìä Execution result: success=%t, output_length=%d",
		executionResult.Success, len(executionResult.Output))

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è
	log.Printf("üß™ Checking solution against test cases")
	checkResult := checkSolution(taskID, executionResult.Output, language)

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
	response := models.CheckResponse{
		Success:  executionResult.Success && checkResult.Passed,
		Passed:   checkResult.Passed,
		Output:   executionResult.Output,
		Expected: checkResult.Expected,
		Actual:   checkResult.Actual,
		Message:  checkResult.Message,
	}

	log.Printf("‚úÖ Check completed: passed=%t, message=%s", response.Passed, response.Message)

	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(response); err != nil {
		log.Printf("‚ùå Failed to encode response: %v", err)
		http.Error(w, `{"success": false, "message": "Internal server error"}`, http.StatusInternalServerError)
		return
	}

	log.Printf("üì§ Response sent successfully")
}

// checkSolution - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–≤–æ–¥ –∫–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
func checkSolution(taskID, actualOutput, language string) models.CheckResult {
	log.Printf("üîé Checking solution for task=%s, language=%s", taskID, language)

	// –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—Ä–∞—Ç—å –∏–∑ –ë–î –∏–ª–∏ –∏–∑ models.Task
	testCases := map[string]map[string]string{
		"1": {
			"python":     "Hello World",
			"javascript": "Hello World",
			"cpp":        "Hello World",
			"java":       "Hello World",
		},
		"hello_world": {
			"python":     "Hello World",
			"javascript": "Hello World",
			"cpp":        "Hello World",
			"java":       "Hello World",
		},
	}

	expected := "Hello World"
	if cases, exists := testCases[taskID]; exists {
		if exp, exists := cases[language]; exists {
			expected = exp
		}
	}

	// –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É –≤ –≤—ã–≤–æ–¥–µ
	actualTrimmed := strings.TrimSpace(actualOutput)
	passed := false

	// –î–ª—è –∑–∞–¥–∞—á–∏ "Hello World" –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É
	if taskID == "1" || taskID == "hello_world" {
		passed = strings.Contains(actualTrimmed, expected)
	} else {
		// –î–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á —Å—Ç—Ä–æ–≥–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
		passed = actualTrimmed == expected
	}

	log.Printf("üìä Test comparison: expected='%s', actual='%s', passed=%t",
		expected, actualTrimmed, passed)

	message := "‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!"
	if !passed {
		message = "‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
	}

	return models.CheckResult{
		Passed:   passed,
		Expected: expected,
		Actual:   actualTrimmed,
		Message:  message,
	}
}
