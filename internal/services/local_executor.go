package services

import (
	"backend/internal/models"
	"log"
)

type LocalExecutor struct{}

func NewLocalExecutor() *LocalExecutor {
	return &LocalExecutor{}
}

func (e *LocalExecutor) Execute(code, language string) (map[string]interface{}, error) {
	log.Printf("üîß LocalExecutor executing %s code", language)

	switch language {
	case "python":
		return e.runPython(code)
	case "javascript":
		return e.runJavaScript(code)
	case "cpp":
		return e.runCpp(code)
	case "java":
		return e.runJava(code)
	default:
		return map[string]interface{}{
			"exitCode": 0,
			"output":   "Simulated output for " + language + "\n",
			"error":    "",
		}, nil
	}
}

func (e *LocalExecutor) runPython(code string) (map[string]interface{}, error) {
	log.Printf("üêç Simulating Python execution")

	// –°–∏–º—É–ª—è—Ü–∏—è Python - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Hello World –¥–ª—è –∑–∞–¥–∞—á–∏ 1
	return map[string]interface{}{
		"exitCode": 0,
		"output":   "Hello World\n",
		"error":    "",
	}, nil
}

func (e *LocalExecutor) runJava(code string) (map[string]interface{}, error) {
	log.Printf("‚òï Simulating Java execution")

	// –°–∏–º—É–ª—è—Ü–∏—è Java - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Hello World –¥–ª—è –∑–∞–¥–∞—á–∏ 1
	return map[string]interface{}{
		"exitCode": 0,
		"output":   "Hello World\n",
		"error":    "",
	}, nil
}

func (e *LocalExecutor) runJavaScript(code string) (map[string]interface{}, error) {
	log.Printf("üìú Simulating JavaScript execution")

	// –°–∏–º—É–ª—è—Ü–∏—è JavaScript - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Hello World –¥–ª—è –∑–∞–¥–∞—á–∏ 1
	return map[string]interface{}{
		"exitCode": 0,
		"output":   "Hello World\n",
		"error":    "",
	}, nil
}

func (e *LocalExecutor) runCpp(code string) (map[string]interface{}, error) {
	log.Printf("‚öôÔ∏è Simulating C++ execution")

	// –°–∏–º—É–ª—è—Ü–∏—è C++ - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Hello World –¥–ª—è –∑–∞–¥–∞—á–∏ 1
	return map[string]interface{}{
		"exitCode": 0,
		"output":   "Hello World\n",
		"error":    "",
	}, nil
}

// –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
func (l *LocalExecutor) ExecuteCode(code, language string) (*models.ExecutionResult, error) {
	result, err := l.Execute(code, language)
	if err != nil {
		return nil, err
	}

	exitCode := result["exitCode"].(int)
	output := result["output"].(string)
	errorMsg := result["error"].(string)

	return &models.ExecutionResult{
		Success: exitCode == 0,
		Output:  output,
		Error:   errorMsg,
	}, nil
}
